{"uid":"cc102631398288a","name":"test_check_post_method[post_data, name 1000]","fullName":"TESTS.test_api.TestApiGet#test_check_post_method","historyId":"a34b54e47f24381ed5d955881595e52e","time":{"start":1699525139512,"stop":1699525140088,"duration":576},"status":"failed","statusMessage":"AssertionError: assert 201 == 400\n +  where 201 = <bound method MainApi.print_requests of <API.main_api.MainApi object at 0x7f4a2d4347c0>>(<Response [201]>)\n +    where <bound method MainApi.print_requests of <API.main_api.MainApi object at 0x7f4a2d4347c0>> = <API.main_api.MainApi object at 0x7f4a2d4347c0>.print_requests","statusTrace":"self = <TESTS.test_api.TestApiGet object at 0x7f4a2d58af50>\nname = 'xYgGLVulAgaACvvLzikWzhqaLNqiATTieWAGPziwwxHKSBZkFGaWkHbBjXOvOxwgkqwAkrvVRIEqeFIGmlRWAZVcqrEfvDPrvVHW'\ncome = 'income', expected = 400\n\n    @pytest.mark.parametrize(\"name, come, expected\", params_api_post_category)\n    def test_check_post_method(self, name, come, expected):\n        post_data = {\n            'categoryName': name,\n            'category_type': 'constant',\n            'income_outcome': come,\n            'target': ''\n        }\n        ma = MainApi(key, \"categories/\", data=post_data)\n        response = ma.set_requests(\"post\")\n>       assert ma.print_requests(response) == expected\nE       assert 201 == 400\nE        +  where 201 = <bound method MainApi.print_requests of <API.main_api.MainApi object at 0x7f4a2d4347c0>>(<Response [201]>)\nE        +    where <bound method MainApi.print_requests of <API.main_api.MainApi object at 0x7f4a2d4347c0>> = <API.main_api.MainApi object at 0x7f4a2d4347c0>.print_requests\n\nTESTS/test_api.py:26: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"TESTS"},{"name":"suite","value":"test_api"},{"name":"subSuite","value":"TestApiGet"},{"name":"host","value":"fv-az629-556"},{"name":"thread","value":"1810-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TESTS.test_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"come","value":"'income'"},{"name":"expected","value":"400"},{"name":"name","value":"'xYgGLVulAgaACvvLzikWzhqaLNqiATTieWAGPziwwxHKSBZkFGaWkHbBjXOvOxwgkqwAkrvVRIEqeFIGmlRWAZVcqrEfvDPrvVHW'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"cc102631398288a.json","parameterValues":["'income'","400","'xYgGLVulAgaACvvLzikWzhqaLNqiATTieWAGPziwwxHKSBZkFGaWkHbBjXOvOxwgkqwAkrvVRIEqeFIGmlRWAZVcqrEfvDPrvVHW'"]}